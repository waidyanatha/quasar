MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([10.0, 2, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([20.0, 2, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([30.0, 2, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([40.0, 2, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([50.0, 2, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([10.0, 3, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([20.0, 3, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([30.0, 3, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([40.0, 3, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([50.0, 3, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([10.0, 4, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([20.0, 4, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([30.0, 4, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([40.0, 4, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([50.0, 4, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([10.0, 5, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([20.0, 5, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([30.0, 5, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([40.0, 5, 'haversine', 300])
MEANSHIFT: dict_keys(['distance_km', 'minimum_samples', 'metric', 'max_iter'])
dict_values([50.0, 5, 'haversine', 300])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([10.0, 2, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([20.0, 4, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([30.0, 4, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([40.0, 4, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([50.0, 4, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([10.0, 5, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([20.0, 5, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([30.0, 5, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([40.0, 5, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([50.0, 5, 'haversine', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([10.0, 2, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([20.0, 2, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([30.0, 2, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([40.0, 2, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([50.0, 2, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([10.0, 3, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([20.0, 3, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([30.0, 3, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([40.0, 3, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([50.0, 3, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([10.0, 4, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([20.0, 4, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([30.0, 4, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([40.0, 4, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([50.0, 4, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([10.0, 5, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([20.0, 5, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([30.0, 5, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([40.0, 5, 'haversine', <class 'int'>])
GREEDY: dict_keys(['distance_km', 'minimum_samples', 'metric', 'seed'])
dict_values([50.0, 5, 'haversine', <class 'int'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([10.0, 2, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([20.0, 2, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([30.0, 2, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([40.0, 2, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([50.0, 2, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([10.0, 3, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([20.0, 3, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([30.0, 3, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([40.0, 3, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([50.0, 3, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([10.0, 4, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([20.0, 4, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([30.0, 4, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([40.0, 4, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([50.0, 4, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([10.0, 5, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([20.0, 5, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([30.0, 5, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([40.0, 5, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
ASYNC-LPA: dict_keys(['distance_km', 'minimum_samples', 'weight', 'seed'])
dict_values([50.0, 5, 'distance', <module 'numpy.random' from '/home/nuwan/anaconda3/envs/obspy/lib/python3.7/site-packages/numpy/random/__init__.py'>])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([10.0, 2])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 2])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 2])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([40.0, 2])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([50.0, 2])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([10.0, 3])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 3])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 3])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([40.0, 3])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([50.0, 3])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([10.0, 4])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 4])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 4])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([40.0, 4])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([50.0, 4])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([10.0, 5])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 5])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 5])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([40.0, 5])
LPC: dict_keys(['distance_km', 'minimum_samples'])
dict_values([50.0, 5])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([10.0, 2])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 2])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 2])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 3])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 3])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 4])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 4])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([20.0, 5])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([30.0, 5])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([40.0, 5])
GIRVAN-NEWMAN: dict_keys(['distance_km', 'minimum_samples'])
dict_values([50.0, 5])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([10.0, 2, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([20.0, 2, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([30.0, 2, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([40.0, 2, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([50.0, 2, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([10.0, 3, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([20.0, 3, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([30.0, 3, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([40.0, 3, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([50.0, 3, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([10.0, 4, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([20.0, 4, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([30.0, 4, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([40.0, 4, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([50.0, 4, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([10.0, 5, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([20.0, 5, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([30.0, 5, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([40.0, 5, 'precomputed'])
AGGLOMERATIVE: dict_keys(['distance_km', 'minimum_samples', 'metric'])
dict_values([50.0, 5, 'precomputed'])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([10.0, 2, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([20.0, 2, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([30.0, 2, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([40.0, 2, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([50.0, 2, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([10.0, 3, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([20.0, 3, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([30.0, 3, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([40.0, 3, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([50.0, 3, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([10.0, 4, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([20.0, 4, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([30.0, 4, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([40.0, 4, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([50.0, 4, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([10.0, 5, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([20.0, 5, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([30.0, 5, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([40.0, 5, 'discretize', 'lobpcg', 'precomputed', 13])
SPECTRAL: dict_keys(['distance_km', 'minimum_samples', 'algorithm', 'cluster_method', 'metric', 'n_clusters'])
dict_values([50.0, 5, 'discretize', 'lobpcg', 'precomputed', 13])
